{"version":3,"file":"content.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA,aAAa;AACb,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACroCAAoC,2BAA2B;AAC/D,mCAAmC,iCAAiC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA","sources":["webpack://knowde-extension/./src/content/content.ts"],"sourcesContent":["// Content script for Knowde extension\n// Analyzes page content and provides learning opportunities\nclass KnowdeContentAnalyzer {\n    constructor() {\n        this.isActive = false;\n        this.highlightColor = \"#404BD9\";\n        this.handleTextSelection = () => {\n            const selection = window.getSelection();\n            const selectedText = selection?.toString().trim();\n            if (selectedText && selectedText.length > 10) {\n                // Show quick action tooltip\n                this.showQuickActionTooltip(selectedText);\n            }\n        };\n        this.init();\n    }\n    async init() {\n        // Get extension settings\n        try {\n            const result = await chrome.storage.local.get([\"settings\"]);\n            const settings = result.settings || {};\n            if (settings.autoCapture) {\n                this.startAnalysis();\n            }\n        }\n        catch (error) {\n            console.error(\"Error initializing content script:\", error);\n        }\n        // Listen for messages from background script\n        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n            this.handleMessage(request, sender, sendResponse);\n            return true; // Keep message channel open\n        });\n        // Listen for keyboard shortcuts\n        document.addEventListener(\"keydown\", (event) => {\n            if (event.altKey && event.key === \"k\") {\n                event.preventDefault();\n                this.toggleLearningMode();\n            }\n        });\n    }\n    handleMessage(request, sender, sendResponse) {\n        switch (request.type) {\n            case \"ANALYZE_PAGE\":\n                this.analyzePage().then(sendResponse);\n                break;\n            case \"TOGGLE_LEARNING_MODE\":\n                this.toggleLearningMode();\n                sendResponse({ success: true });\n                break;\n            case \"CAPTURE_SELECTION\":\n                this.captureSelection().then(sendResponse);\n                break;\n            default:\n                sendResponse({ error: \"Unknown message type\" });\n        }\n    }\n    async analyzePage() {\n        const pageData = {\n            title: document.title,\n            url: window.location.href,\n            content: this.extractTextContent(),\n            timestamp: Date.now(),\n        };\n        // Send page data to background script for processing\n        try {\n            await chrome.runtime.sendMessage({\n                type: \"PAGE_ANALYZED\",\n                data: pageData,\n            });\n        }\n        catch (error) {\n            console.error(\"Error sending page data:\", error);\n        }\n        return pageData;\n    }\n    extractTextContent() {\n        // Extract meaningful text content from the page\n        const elementsToExtract = [\n            \"p\",\n            \"h1\",\n            \"h2\",\n            \"h3\",\n            \"h4\",\n            \"h5\",\n            \"h6\",\n            \"li\",\n            \"article\",\n            \"section\",\n        ];\n        const textContent = [];\n        elementsToExtract.forEach((tag) => {\n            const elements = document.querySelectorAll(tag);\n            elements.forEach((element) => {\n                const text = element.textContent?.trim();\n                if (text && text.length > 10) {\n                    textContent.push(text);\n                }\n            });\n        });\n        return textContent.join(\" \").substring(0, 5000); // Limit to 5000 characters\n    }\n    async captureSelection() {\n        const selection = window.getSelection();\n        const selectedText = selection?.toString().trim();\n        if (!selectedText) {\n            return { text: \"\", success: false };\n        }\n        // Highlight the selected text\n        this.highlightSelectedText(selection);\n        // Save to storage\n        try {\n            const result = await chrome.storage.local.get([\"highlights\"]);\n            const highlights = result.highlights || [];\n            const newHighlight = {\n                id: Date.now().toString(),\n                text: selectedText,\n                url: window.location.href,\n                title: document.title,\n                timestamp: Date.now(),\n            };\n            highlights.push(newHighlight);\n            await chrome.storage.local.set({ highlights });\n            // Send to background for processing\n            chrome.runtime.sendMessage({\n                type: \"TEXT_CAPTURED\",\n                highlight: newHighlight,\n            });\n            return { text: selectedText, success: true };\n        }\n        catch (error) {\n            console.error(\"Error capturing selection:\", error);\n            return { text: selectedText, success: false };\n        }\n    }\n    highlightSelectedText(selection) {\n        if (!selection || selection.rangeCount === 0)\n            return;\n        const range = selection.getRangeAt(0);\n        const highlight = document.createElement(\"span\");\n        highlight.style.backgroundColor = this.highlightColor;\n        highlight.style.color = \"white\";\n        highlight.style.padding = \"2px 4px\";\n        highlight.style.borderRadius = \"3px\";\n        highlight.style.fontWeight = \"bold\";\n        highlight.className = \"knowde-highlight\";\n        try {\n            range.surroundContents(highlight);\n        }\n        catch (error) {\n            // Fallback for complex selections\n            console.log(\"Could not highlight complex selection\");\n        }\n    }\n    toggleLearningMode() {\n        this.isActive = !this.isActive;\n        if (this.isActive) {\n            this.activateLearningMode();\n        }\n        else {\n            this.deactivateLearningMode();\n        }\n    }\n    activateLearningMode() {\n        // Add visual indicator that learning mode is active\n        const indicator = document.createElement(\"div\");\n        indicator.id = \"knowde-learning-indicator\";\n        indicator.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: linear-gradient(135deg, #404BD9, #60C2DA);\n        color: white;\n        padding: 8px 16px;\n        border-radius: 20px;\n        font-family: 'Inter', sans-serif;\n        font-size: 14px;\n        font-weight: 500;\n        z-index: 10000;\n        box-shadow: 0 4px 12px rgba(64, 75, 217, 0.3);\n      \">\n        ðŸ§  Learning Mode Active\n      </div>\n    `;\n        document.body.appendChild(indicator);\n        // Enable text selection capturing\n        document.addEventListener(\"mouseup\", this.handleTextSelection);\n    }\n    deactivateLearningMode() {\n        const indicator = document.getElementById(\"knowde-learning-indicator\");\n        if (indicator) {\n            indicator.remove();\n        }\n        // Disable text selection capturing\n        document.removeEventListener(\"mouseup\", this.handleTextSelection);\n    }\n    showQuickActionTooltip(text) {\n        // Remove existing tooltip\n        const existingTooltip = document.getElementById(\"knowde-tooltip\");\n        if (existingTooltip) {\n            existingTooltip.remove();\n        }\n        const tooltip = document.createElement(\"div\");\n        tooltip.id = \"knowde-tooltip\";\n        tooltip.innerHTML = `\n      <div style=\"\n        position: absolute;\n        background: white;\n        border: 1px solid #E5E3E6;\n        border-radius: 8px;\n        padding: 8px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        z-index: 10001;\n        font-family: 'Inter', sans-serif;\n        font-size: 12px;\n      \">\n        <button id=\"knowde-learn-more\" style=\"\n          background: #404BD9;\n          color: white;\n          border: none;\n          padding: 4px 8px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n        \">\n          Learn More ðŸ§ \n        </button>\n      </div>\n    `;\n        // Position near the selection\n        const selection = window.getSelection();\n        if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            const rect = range.getBoundingClientRect();\n            tooltip.style.left = `${rect.left + window.scrollX}px`;\n            tooltip.style.top = `${rect.bottom + window.scrollY + 5}px`;\n        }\n        document.body.appendChild(tooltip);\n        // Add click handler\n        const learnButton = document.getElementById(\"knowde-learn-more\");\n        if (learnButton) {\n            learnButton.addEventListener(\"click\", () => {\n                this.captureSelection();\n                tooltip.remove();\n            });\n        }\n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (tooltip.parentNode) {\n                tooltip.remove();\n            }\n        }, 5000);\n    }\n    startAnalysis() {\n        // Start analyzing the page content\n        this.analyzePage();\n        // Set up periodic analysis for dynamic content\n        setInterval(() => {\n            if (this.isActive) {\n                this.analyzePage();\n            }\n        }, 30000); // Analyze every 30 seconds\n    }\n}\n// Initialize the content analyzer\nconst knowdeAnalyzer = new KnowdeContentAnalyzer();\n// Export for potential use\nwindow.knowdeAnalyzer = knowdeAnalyzer;\n"],"names":[],"sourceRoot":""}