{"version":3,"file":"background.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2BAA2B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB,UAAU,WAAW,qCAAqC,cAAc;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM,IAAI,QAAQ;AACnC,iBAAiB,OAAO,MAAM,qBAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACsD","sources":["webpack://knowde-extension/webpack/bootstrap","webpack://knowde-extension/webpack/runtime/define property getters","webpack://knowde-extension/webpack/runtime/hasOwnProperty shorthand","webpack://knowde-extension/webpack/runtime/make namespace object","webpack://knowde-extension/./src/background/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Background script for Knowde extension\n// Handles communication between popup, content script, and external APIs\n// Initialize extension\nchrome.runtime.onInstalled.addListener(() => {\n    console.log(\"Knowde extension installed\");\n    // Set default values\n    chrome.storage.local.set({\n        progress: {\n            conceptsLearned: 0,\n            dailyGoal: 10,\n            currentStreak: 0,\n        },\n        settings: {\n            autoCapture: true,\n            notifications: true,\n            learningMode: \"adaptive\",\n        },\n    });\n});\n// Handle messages from popup and content script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log(\"Background received message:\", request);\n    if (request.type === \"PROCESS_LEARNING_REQUEST\") {\n        processLearningRequest(request.text)\n            .then((response) => sendResponse(response))\n            .catch((error) => {\n            console.error(\"Error processing learning request:\", error);\n            sendResponse({\n                text: \"Sorry, I encountered an error processing your request.\",\n                success: false,\n            });\n        });\n        // Return true to indicate we'll send a response asynchronously\n        return true;\n    }\n    if (request.type === \"GENERATE_LESSON_PLAN\") {\n        generateLessonPlan(request.text)\n            .then((response) => sendResponse(response))\n            .catch((error) => {\n            console.error(\"Error generating lesson plan:\", error);\n            sendResponse({\n                text: \"Sorry, I encountered an error generating your lesson plan.\",\n                success: false,\n            });\n        });\n        // Return true to indicate we'll send a response asynchronously\n        return true;\n    }\n});\n// Process learning requests and generate responses\nasync function processLearningRequest(text) {\n    // For now, return a mock response\n    // In the future, this will integrate with AI APIs\n    const responses = [\n        \"Great question! I'll create a personalized learning plan for you about this topic.\",\n        \"I understand you want to learn more about this. Let me break it down into manageable steps.\",\n        \"Excellent! I'll help you build a comprehensive understanding of this subject.\",\n        \"Perfect! Let me create a structured learning path that builds on your existing knowledge.\",\n        \"I see what you're interested in. I'll design a lesson plan that adapts to your learning style.\",\n    ];\n    const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n    // Simulate processing time\n    await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000));\n    // Update progress\n    try {\n        const result = await chrome.storage.local.get([\"progress\"]);\n        const currentProgress = result.progress || {\n            conceptsLearned: 0,\n            dailyGoal: 10,\n            currentStreak: 0,\n        };\n        // Increment concepts learned\n        currentProgress.conceptsLearned += 1;\n        await chrome.storage.local.set({ progress: currentProgress });\n    }\n    catch (error) {\n        console.error(\"Error updating progress:\", error);\n    }\n    return {\n        text: randomResponse,\n        success: true,\n    };\n}\n// Generate lesson plans based on user input\nasync function generateLessonPlan(text) {\n    // Mock lesson plan generation\n    // In the future, this will integrate with AI APIs (OpenAI, Claude, etc.)\n    const topics = extractTopics(text);\n    const difficulty = determineDifficulty(text);\n    const estimatedTime = calculateEstimatedTime(topics.length, difficulty);\n    // Generate a mock lesson plan based on the input\n    const lessonPlan = {\n        title: generateTitle(text),\n        description: generateDescription(text),\n        difficulty: difficulty,\n        estimatedTime: estimatedTime,\n        topics: topics,\n    };\n    // Simulate AI processing time\n    await new Promise((resolve) => setTimeout(resolve, 2000 + Math.random() * 3000));\n    return {\n        text: `I've created a comprehensive lesson plan for \"${lessonPlan.title}\". This ${difficulty}-level course is estimated to take ${estimatedTime}.`,\n        lessonPlan: lessonPlan,\n        success: true,\n    };\n}\n// Helper functions for lesson plan generation\nfunction extractTopics(text) {\n    const keywords = [\n        \"react\",\n        \"javascript\",\n        \"python\",\n        \"machine learning\",\n        \"css\",\n        \"html\",\n        \"algorithms\",\n        \"data structures\",\n        \"typescript\",\n        \"node.js\",\n        \"database\",\n        \"api\",\n        \"frontend\",\n        \"backend\",\n        \"ai\",\n        \"blockchain\",\n        \"cybersecurity\",\n    ];\n    const foundTopics = keywords.filter((keyword) => text.toLowerCase().includes(keyword.toLowerCase()));\n    // If no specific topics found, generate generic ones based on text analysis\n    if (foundTopics.length === 0) {\n        return [\n            \"Fundamentals\",\n            \"Core Concepts\",\n            \"Practical Applications\",\n            \"Best Practices\",\n        ];\n    }\n    return foundTopics.length > 0 ? foundTopics.slice(0, 5) : [\"General Topics\"];\n}\nfunction determineDifficulty(text) {\n    const beginnerKeywords = [\n        \"basic\",\n        \"intro\",\n        \"beginner\",\n        \"start\",\n        \"learn\",\n        \"fundamentals\",\n    ];\n    const advancedKeywords = [\n        \"advanced\",\n        \"expert\",\n        \"complex\",\n        \"deep dive\",\n        \"master\",\n    ];\n    const lowerText = text.toLowerCase();\n    if (beginnerKeywords.some((keyword) => lowerText.includes(keyword))) {\n        return \"beginner\";\n    }\n    if (advancedKeywords.some((keyword) => lowerText.includes(keyword))) {\n        return \"advanced\";\n    }\n    return \"intermediate\";\n}\nfunction calculateEstimatedTime(topicCount, difficulty) {\n    const baseTime = difficulty === \"beginner\" ? 20 : difficulty === \"intermediate\" ? 30 : 45;\n    const totalMinutes = baseTime + topicCount * 10;\n    if (totalMinutes < 60) {\n        return `${totalMinutes} minutes`;\n    }\n    else {\n        const hours = Math.floor(totalMinutes / 60);\n        const minutes = totalMinutes % 60;\n        return minutes > 0\n            ? `${hours}h ${minutes}m`\n            : `${hours} hour${hours > 1 ? \"s\" : \"\"}`;\n    }\n}\nfunction generateTitle(text) {\n    // Extract main subject from user input\n    const commonPrefixes = [\n        \"i want to learn\",\n        \"teach me\",\n        \"help me understand\",\n        \"learn about\",\n    ];\n    let cleanText = text.toLowerCase();\n    commonPrefixes.forEach((prefix) => {\n        if (cleanText.startsWith(prefix)) {\n            cleanText = cleanText.replace(prefix, \"\").trim();\n        }\n    });\n    // Capitalize and format\n    return (cleanText\n        .split(\" \")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \")\n        .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add spaces between camelCase\n        .substring(0, 50) + (cleanText.length > 50 ? \"...\" : \"\"));\n}\nfunction generateDescription(text) {\n    const templates = [\n        `A comprehensive learning path designed to help you master the concepts and practical applications.`,\n        `An interactive course that covers fundamental concepts, real-world examples, and hands-on practice.`,\n        `A structured approach to learning with clear explanations, examples, and progressive skill building.`,\n        `A personalized curriculum that adapts to your learning style and provides practical knowledge.`,\n    ];\n    return templates[Math.floor(Math.random() * templates.length)];\n}\n// Handle keyboard shortcuts\nchrome.commands.onCommand.addListener((command) => {\n    if (command === \"toggle-learning\") {\n        // Toggle learning mode or open popup\n        chrome.action.openPopup();\n    }\n});\n// Monitor tab changes for learning opportunities\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.status === \"complete\" && tab.url) {\n        // Analyze page content for learning opportunities\n        // This will be implemented later with content script integration\n        console.log(\"Page loaded:\", tab.url);\n    }\n});\n// Export for testing (if needed)\nexport { processLearningRequest, generateLessonPlan };\n"],"names":[],"sourceRoot":""}